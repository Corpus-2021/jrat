<?xml version="1.0"?>
<document title="JRat Quickstart Guide">


	<section-group>
		<p>
		This document is intended to walk a new JRat user, step by step, through
		a simple yet useful example of JRat usage.

		It does not go into great detail on what is possible, but rather is intended to
		simply get a user's feet wet.

		For a more general overview of how JRat is used, refer to the JRat
		<a href="flow.html">process flow</a>.
		</p>
		<p>
		If you have a problem getting JRat to work, feel free to email <bold>jrat@shiftone.org</bold>.
		</p>

		<section title="1. Download and UnZip the JRat binary distribution">
			<p>
			Follow this
			<a href="http://sourceforge.net/project/showfiles.php?group_id=41841">link</a>
			to be directed to the SourceForge download site for JRat.
			Save and unzip the most recent release to your local system.
			This process requires the file <bold>shiftone-jrat.jar</bold> which you will find in the <bold>dist</bold> directory.
			</p>
			<p>
			To learn more about this JAR file, refer to the <a href="anatomy.html">Anatomy</a> document.
			</p>
		</section>

		<section title="2. Download and UnZip the BCEL 5 binary distribution">
			<p>
			Follow this
			<a href="http://jakarta.apache.org/builds/jakarta-bcel/release/v5.0/">link</a>
			to be directed to the Jakarta BCEL 5.0 download site.
			Save and unzip the file <bold>bcel-5.0.zip</bold> to your local system.
			This process requires the file <bold>bcel.jar</bold>.
			BCEL 5.1 has also works.
			If you want, you can copy it to somewhere else on your system.
			</p>
		</section>

		<section title="3. Download and UnZip an XML Parser">
			<p>
			If you are using Java 1.4, <bold>ignore this step</bold>.  You already have an XML parser.
			</p>
			<p>
			If you are using Java 1.3, follow this
			<a href="http://xml.apache.org/dist/crimson/">link</a>
			to be directed to the Apache Crimson 1.1.3 download site.
			Save and unzip the file <bold>crimson-1.1.3-bin.zip</bold> to your local system.
			This process requires the file <bold>crimson.jar</bold>.
			If you want, you can copy it to somewhere else on your system.
			</p>
		</section>


		<section title="4. Compile/Build your Java application">
			Compile your software however you normally do.  Use Ant, javac, or your favorite IDE.
		</section>

		<section title="5. Test your application without JRat">
			It's a good practice to verify that your application runs as expected before trying to profile it.
			Run it.  Run some tests.
		</section>

		<section title="6. Instrument your JARs and classes">
			<p>
			For the purposes of this guide, we are going to use the JRat Desktop to instrument your classes and JARs.
			The command to run at the command prompt is shown in the box below.
			Run this command wherever the JRat JAR file is located.
			</p>
			<p>
			For Java 1.4, execute the following command.
			</p>
			<code>javaw -jar shiftone-jrat.jar</code>
			<p>
			For Java 1.3, execute the following command (this makes the XML parser available).
			</p>
			<code>javaw -cp crimson.jar;shiftone-jrat.jar org.shiftone.jrat.ui.Desktop</code>
			<p>
			When the Desktop starts up, you will need to pick one of two options from the <bold>Instrument</bold> menu.
			Both options will inject JARs or Class files, and both options support selecting multiple files / directories (hold down ctrl or shift).
			Understand that once this step is complete, injected JARs and Class files will contain dependencies on the JRat JAR and <bold>will not work without it</bold>.
			</p>
			<figure src="images/menu-inject.gif"/>
			<p>
			If you want to inject all the classes generated by your build, pick <bold>Inject Directories Recursively</bold>.
			Browse to and select your build's output directory; where your class files are.
			To begin the injection process, click <bold>Open</bold>.
			The JRat Desktop will recursively scan the selected directory or directories for class files,
			JAR files, and ZIP files and instrument them.
			This may take a few moments, depending on how many files are found.
			</p>
			<p>
			If you want to inject only a few select files, pick the menu option <bold>Inject JAR(s) or Class File(s)</bold>.
			</p>
		</section>

		<section title="7. Configure the Environment">
			There are two steps necessary to configure your application to run with JRat.
			<ol>
			<li>Add shiftone-jrat.jar to your application's classpath.</li>
			<li>
			Add a system property to configure the JRat handler factory.
			This requires that a parameter be added to the VM command line.
			The parameter that needs to be added is shown in the box below.
			</li>
			</ol>
			<code>-Djrat.factory=org.shiftone.jrat.provider.tree.TreeMethodHandlerFactory</code>
			<p>
			The above configuration will let JRat know that you want to use the tree handler to
			process execution events.  To find out about how to configure JRat, refer to the
			<a href="configure.html">Configuration Guide</a> (later, after your first test).
			</p>
			
			<p>
			If you profiling a web application, please refer to <a href="tomcat.html">this document</a>.
			</p>
		</section>

		<section title="8. Run your application with JRat">
			<p>
			Run your app like you did in step 5.  If you application is interactive, then run through
			a few common usage scenarios.  The more the application runs, the more data can be collected
			by JRat.  When you are done running your app <bold>shut it down</bold> - this will allow
			JRat to execute any registered shutdown hooks, which in many cases writes and closes output
			files.  If you "kill -9" the process, the VM won't get a chance to run any shutdown hooks.
			</p>
			<p>
			Getting a NoClassDefFoundError?
			Probably, you don't have the JRat JAR in your application's classpath correctly.
			The missing class will typically be reported as <bold>org.shiftone.jrat.core.HandlerFactory</bold>
			and the exception will be thrown from a &lt;clinit&gt; method of an injected class (static initializer).
			</p>
		</section>

		<section title="9. Examine the JRat Output">
			<p>
			Run the JRat Desktop again, just like you did in step 6.  This time, from the menu bar select
			<bold>File</bold> then <bold>Open JRat Output File</bold>.  Locate your output file with the
			and click <bold>Open</bold>.  Output files are written to a subdirectory of the profiled
			application's working directory.  The subdirectory will be based on the time JRat was initialized
			by the profiled application, and will be of the form "JRatOutput/2003-01-02_AM-10-45-50".
			Look for a file called "0002_tree.xrat.gz".
			</p>
			<p>
			If this file does not exist, examine the log file "0001_log.jrat" instead (it can be opened with a text editor or JRat Desktop).
			It is likely that the "tree" handler was not correctly configured, probably because of a missing system property (see step 7).
			When a handler is not configured, the default "silent" handler is used.
			</p>
			<p>
			If everything goes well, a new tab should be added to the JRat Desktop containing a view of the tree handler's output.
			</p>
			<a href="images/treeView.gif">
			<figure src="images/treeViewThumb.gif"/>
			</a>
		</section>
		<section title="10. Fix what needs Fixin'">

			<p>
			If you learn something from the previous step, do what's necessary to improve your code.
			That's the point, right?
			</p>
			<p>Return to step 4.</p>
			<p>Send feedback to jrat@shiftone.org.</p>

		</section>
	</section-group>

</document>