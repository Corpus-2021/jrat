<?xml version="1.0"?>
<document title="JRat the Java Runtime Analysis Toolkit">


	<section-group>

		<figure src="images/mad-rat.gif"/>

		<section title="What is JRat?">
			<p>
			JRat is the Java Runtime Analysis Toolkit.
			Its purpose is to enable developers to better understand the runtime behavior of their Java programs.
            		The term "behavior" includes, but is not limited to performance profiling.
			</p>
			<p>
			While JRat is still in beta, without adding code to your application it can...
			</p>
			<ul>
			<li>accumulate timing statistics (a few ways)</li>
			<li>create trace logging</li>
			<li>track rate methods are called over time</li>
			<li>track the response time of methods over time</li>
			</ul>
			<p/>

			<a href="screens.html">screen shots</a>


		</section>

		<section title="Hooks, Handlers, and Viewers">
			<p>
			JRat's design is based on three types of components.
			Hooks enable an application to be monitored at runtime.
			Events generated by hooks are sent to the JRat Runtime where processing is delegated to one or more handlers.
			Handlers produce output files during runtime and at shutdown.
			Each output file identifies the Viewer component that can be used to navigate the data.
			</p>
			<p>
			The below diagram shows the most basic configuration.
			</p>
			<figure src="images/arch.png"/>

		</section>

		<section title="How does JRat hook into an application?">
			There are currently a number of ways JRat can monitor an application.
			<ol>
				<li><a href="bytecode.html">Build time bytecode instrumentation</a></li>
				<li><a href="jboss-aop.html">JBoss 4 AOP</a> (new)</li>
				<li><a href="dynamicproxy.html">Dynamic proxies</a></li>
				<li><a href="monitor.html">Programmatically - Monitor API</a></li>
				<li><a href="jdi.html">Java Debugger Interface</a> (experimental)</li>

			</ol>
		</section>

		<section title="What does JRat do with these events?">
			<p>
			JRat provides a event handler SPI (Service Provider Interface), as well as
			several useful provider implementations.  Each provider is able to interpret
			execution events in a different way.  For example, one handler may count the number
			of times each method is called and the total amount of time taken in each method.
			Another might be used to collect the frequency (throughput) with which a certain
			method is called is satisfied over the life of an application.
			</p>
			<p>
			In many cases, the output of the providers is not easily human readable.
            		There is a separate SPI that can be used to implement Swing output viewers.
			</p>
			<p>
			You the user of JRat can also implement your own provider.
			See <a href="api/org/shiftone/jrat/core/spi/package-summary.html">javadoc</a> for details.
			</p>
			<p>
			To find out how to configure JRat event handlers, refer to the
			<a href="configure.html">Configuration Guide</a>
			</p>
		</section>

		<section title="Is there a user interface?">
			<p>
			There is.  While it is not absolutely necessary to use the user interface, many of the built in
			event handlers produce output that is (to say the least) difficult to understand without
			a custom viewer.  Below is a screenshot of the interface being used to view the output of the
			"tree" handler.  This provider traces threads and aggregates the amount of time threads spend
			inside each method.
			</p>
			<p>
			Viewing output of "tree" provider after profiling JBoss at startup.
			</p>
			<a href="images/treeView.gif">
			<figure src="images/treeViewThumb.gif"/>
			</a>
			<a href="screens.html">Click here for more screen shots</a>
		</section>

		<section title="How do I start using JRat?">
			Good of you to ask.  To start using JRat, it is recomended that you read
			<a href="quickstart.html">The JRat Quick Start Guide</a>.
			If you profiling a web application, also refer to <a href="tomcat.html">this document</a>.
		</section>



	</section-group>



</document>