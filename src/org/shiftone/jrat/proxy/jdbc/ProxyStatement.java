package org.shiftone.jrat.proxy.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import org.shiftone.jrat.util.log.Log;
import org.shiftone.jrat.util.log.LogFactory;


/**
 * Class ProxyStatement
 *
 * @author <a href="mailto:jeff@shiftone.org">Jeff Drost</a>
 */
public class ProxyStatement implements Statement {

    private static final Log LOG             = LogFactory.getLogger(ProxyStatement.class);
    private static int       instanceCounter = 0;
    private final int        instanceNumber  = (instanceCounter++);
    ProxyConnection          proxyConnection = null;
    Statement                targetStatement = null;

    /**
     * Constructor ProxyStatement
     *
     * @param targetStatement
     * @param proxyConnection
     */
    public ProxyStatement(Statement targetStatement, ProxyConnection proxyConnection) {

        this.targetStatement     = targetStatement;
        this.proxyConnection     = proxyConnection;

        log("new ProxyStatement");

    }

    /**
     * Method log
     *
     * @param message .
     */
    void log(String message) {

        proxyConnection.log("S" + instanceNumber + " " + message);

    }

    /**
     * Method addBatch
     *
     * @param sql .
     *
     * @throws SQLException
     */
    public void addBatch(String sql) throws SQLException {

        log("addBatch(" + sql + ")");
        targetStatement.addBatch(sql);

    }

    /**
     * Method cancel
     *
     * @throws SQLException
     */
    public void cancel() throws SQLException {

        log("cancel()");
        targetStatement.cancel();

    }

    /**
     * Method clearBatch
     *
     * @throws SQLException
     */
    public void clearBatch() throws SQLException {

        log("clearBatch()");
        targetStatement.clearBatch();

    }

    /**
     * Method clearWarnings
     *
     * @throws SQLException
     */
    public void clearWarnings() throws SQLException {

        log("clearWarnings()");
        targetStatement.clearWarnings();

    }

    /**
     * Method close
     *
     * @throws SQLException
     */
    public void close() throws SQLException {

        log("close()");
        targetStatement.close();

    }

    /**
     * Method execute
     *
     * @param sql .
     *
     * @return .
     *
     * @throws SQLException
     */
    public boolean execute(String sql) throws SQLException {

        boolean b;
        long    finish;
        long    start = 0;

        try {

            start     = System.currentTimeMillis();
            b         = targetStatement.execute(sql);

        } finally {

            finish = System.currentTimeMillis();

            log("execute(" + sql + ") took " + (finish - start) + "ms");

        }

        return b;

    }

    /**
     * Method execute
     *
     * @param sql .
     * @param autoGeneratedKeys .
     *
     * @return .
     *
     * @throws SQLException
     */
    public boolean execute(String sql, int autoGeneratedKeys)
        throws SQLException {

        boolean b;
        long    finish;
        long    start = 0;

        try {

            start     = System.currentTimeMillis();
            b         = targetStatement.execute(sql, autoGeneratedKeys);

        } finally {

            finish = System.currentTimeMillis();

            log("execute(" + sql + "," + autoGeneratedKeys + ") took " + (finish - start) + "ms");

        }

        return b;

    }

    /**
     * Method execute
     *
     * @param sql .
     * @param columnIndexes .
     *
     * @return .
     *
     * @throws SQLException
     */
    public boolean execute(String sql, int[] columnIndexes)
        throws SQLException {

        boolean b;
        long    finish;
        long    start = 0;

        try {

            start     = System.currentTimeMillis();
            b         = targetStatement.execute(sql, columnIndexes);

        } finally {

            finish = System.currentTimeMillis();

            log("execute(" + sql + ", int[]) took " + (finish - start) + "ms");

        }

        return b;

    }

    /**
     * Method execute
     *
     * @param sql .
     * @param columnNames .
     *
     * @return .
     *
     * @throws SQLException
     */
    public boolean execute(String sql, String[] columnNames)
        throws SQLException {

        boolean b;
        long    finish;
        long    start = 0;

        try {

            start     = System.currentTimeMillis();
            b         = targetStatement.execute(sql, columnNames);

        } finally {

            finish = System.currentTimeMillis();

            log("execute(" + sql + ", String[]) took " + (finish - start) + "ms");

        }

        return b;

    }

    /**
     * Method executeBatch
     *
     * @return .
     *
     * @throws SQLException
     */
    public int[] executeBatch() throws SQLException {

        int[] i;
        long  finish;
        long  start = 0;

        try {

            start     = System.currentTimeMillis();
            i         = targetStatement.executeBatch();

        } finally {

            finish = System.currentTimeMillis();

            log("executeBatch() took " + (finish - start) + "ms");

        }

        return i;

    }

    /**
     * Method executeQuery
     *
     * @param sql .
     *
     * @return .
     *
     * @throws SQLException
     */
    public ResultSet executeQuery(String sql) throws SQLException {

        ResultSet rs;
        long      finish;
        long      start = 0;

        try {

            start     = System.currentTimeMillis();
            rs        = targetStatement.executeQuery(sql);

        } finally {

            finish = System.currentTimeMillis();

            log("executeQuery(" + sql + ") took " + (finish - start) + "ms");

        }

        return rs;

    }

    /**
     * Method executeUpdate
     *
     * @param sql .
     *
     * @return .
     *
     * @throws SQLException
     */
    public int executeUpdate(String sql) throws SQLException {

        int  i;
        long finish;
        long start = 0;

        try {

            start     = System.currentTimeMillis();
            i         = targetStatement.executeUpdate(sql);

        } finally {

            finish = System.currentTimeMillis();

            log("executeUpdate(" + sql + ") took " + (finish - start) + "ms");

        }

        return i;

    }

    /**
     * Method executeUpdate
     *
     * @param sql .
     * @param autoGeneratedKeys .
     *
     * @return .
     *
     * @throws SQLException
     */
    public int executeUpdate(String sql, int autoGeneratedKeys)
        throws SQLException {

        int  i;
        long finish;
        long start = 0;

        try {

            start     = System.currentTimeMillis();
            i         = targetStatement.executeUpdate(sql, autoGeneratedKeys);

        } finally {

            finish = System.currentTimeMillis();

            log("executeUpdate(" + sql + ", " + autoGeneratedKeys + ") took " + (finish - start) + "ms");

        }

        return i;

    }

    /**
     * Method executeUpdate
     *
     * @param sql .
     * @param columnIndexes .
     *
     * @return .
     *
     * @throws SQLException
     */
    public int executeUpdate(String sql, int[] columnIndexes)
        throws SQLException {

        int  i;
        long finish;
        long start = 0;

        try {

            start     = System.currentTimeMillis();
            i         = targetStatement.executeUpdate(sql, columnIndexes);

        } finally {

            finish = System.currentTimeMillis();

            log("executeUpdate(" + sql + ", int[]) took " + (finish - start) + "ms");

        }

        return i;

    }

    /**
     * Method executeUpdate
     *
     * @param sql .
     * @param columnNames .
     *
     * @return .
     *
     * @throws SQLException
     */
    public int executeUpdate(String sql, String[] columnNames)
        throws SQLException {

        int  i;
        long finish;
        long start = 0;

        try {

            start     = System.currentTimeMillis();
            i         = targetStatement.executeUpdate(sql, columnNames);

        } finally {

            finish = System.currentTimeMillis();

            log("executeUpdate(" + sql + ", String[]) took " + (finish - start) + "ms");

        }

        return i;

    }

    /**
     * Method getConnection
     *
     * @return .
     *
     * @throws SQLException
     */
    public Connection getConnection() throws SQLException {

        log("getConnection()");

        return proxyConnection; //targetStatement.getConnection();

    }

    /**
     * Method getFetchDirection
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getFetchDirection() throws SQLException {

        return targetStatement.getFetchDirection();

    }

    /**
     * Method getFetchSize
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getFetchSize() throws SQLException {

        return targetStatement.getFetchSize();

    }

    /**
     * Method getGeneratedKeys
     *
     * @return .
     *
     * @throws SQLException
     */
    public ResultSet getGeneratedKeys() throws SQLException {

        return targetStatement.getGeneratedKeys();

    }

    /**
     * Method getMaxFieldSize
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getMaxFieldSize() throws SQLException {

        return targetStatement.getMaxFieldSize();

    }

    /**
     * Method getMaxRows
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getMaxRows() throws SQLException {

        return targetStatement.getMaxRows();

    }

    /**
     * Method getMoreResults
     *
     * @return .
     *
     * @throws SQLException
     */
    public boolean getMoreResults() throws SQLException {

        return targetStatement.getMoreResults();

    }

    /**
     * Method getMoreResults
     *
     * @param current .
     *
     * @return .
     *
     * @throws SQLException
     */
    public boolean getMoreResults(int current) throws SQLException {

        return targetStatement.getMoreResults(current);

    }

    /**
     * Method getQueryTimeout
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getQueryTimeout() throws SQLException {

        return targetStatement.getQueryTimeout();

    }

    /**
     * Method getResultSet
     *
     * @return .
     *
     * @throws SQLException
     */
    public ResultSet getResultSet() throws SQLException {

        return targetStatement.getResultSet();

    }

    /**
     * Method getResultSetConcurrency
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getResultSetConcurrency() throws SQLException {

        return targetStatement.getResultSetConcurrency();

    }

    /**
     * Method getResultSetHoldability
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getResultSetHoldability() throws SQLException {

        return targetStatement.getResultSetHoldability();

    }

    /**
     * Method getResultSetType
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getResultSetType() throws SQLException {

        return targetStatement.getResultSetType();

    }

    /**
     * Method getUpdateCount
     *
     * @return .
     *
     * @throws SQLException
     */
    public int getUpdateCount() throws SQLException {

        return targetStatement.getUpdateCount();

    }

    /**
     * Method getWarnings
     *
     * @return .
     *
     * @throws SQLException
     */
    public SQLWarning getWarnings() throws SQLException {

        return targetStatement.getWarnings();

    }

    /**
     * Method setCursorName
     *
     * @param name .
     *
     * @throws SQLException
     */
    public void setCursorName(String name) throws SQLException {

        targetStatement.setCursorName(name);

    }

    /**
     * Method setEscapeProcessing
     *
     * @param enable .
     *
     * @throws SQLException
     */
    public void setEscapeProcessing(boolean enable) throws SQLException {

        targetStatement.setEscapeProcessing(enable);

    }

    /**
     * Method setFetchDirection
     *
     * @param direction .
     *
     * @throws SQLException
     */
    public void setFetchDirection(int direction) throws SQLException {

        targetStatement.setFetchDirection(direction);

    }

    /**
     * Method setFetchSize
     *
     * @param rows .
     *
     * @throws SQLException
     */
    public void setFetchSize(int rows) throws SQLException {

        targetStatement.setFetchSize(rows);

    }

    /**
     * Method setMaxFieldSize
     *
     * @param max .
     *
     * @throws SQLException
     */
    public void setMaxFieldSize(int max) throws SQLException {

        targetStatement.setMaxFieldSize(max);

    }

    /**
     * Method setMaxRows
     *
     * @param max .
     *
     * @throws SQLException
     */
    public void setMaxRows(int max) throws SQLException {

        targetStatement.setMaxRows(max);

    }

    /**
     * Method setQueryTimeout
     *
     * @param seconds .
     *
     * @throws SQLException
     */
    public void setQueryTimeout(int seconds) throws SQLException {

        targetStatement.setQueryTimeout(seconds);

    }

    /**
     * Method equals
     *
     * @param obj .
     *
     * @return .
     */
    public boolean equals(Object obj) {

        return targetStatement.equals(obj);

    }

    /**
     * Method hashCode
     *
     * @return .
     */
    public int hashCode() {

        return targetStatement.hashCode();

    }

    /**
     * Method toString
     *
     * @return .
     */
    public String toString() {

        return targetStatement.toString();

    }

}
